<?xml version="1.0" encoding="UTF-8"?>
<!--<configuration debug="true" scan="true" scanPeriod="30 seconds">-->
<configuration debug="false">
    <!-- 定义日志文件 输入位置 -->
    <property name="LOG_HOME" value="logs/"/>
    <!-- 日志最大的历史 30天 -->
    <property name="maxHistory" value="30"/>



    <!-- 输出到控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} |%c{0}-%M|%level| %m%n</pattern>
        </encoder>
    </appender>
    <!--性能日志-->
    <appender name="DATELOG_FUNCTIME" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--<filter class="com.yixue.irsapi.filter.FuncTimeLogFilter">-->
        <!--</filter>-->
        <encoder>
            <pattern>|irs-server |%d{yyyy-MM-dd HH:mm:ss.SSS}|%c{0} %M|%level|%m%n</pattern>
        </encoder>
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志输出位置 可相对、和绝对路径 -->
            <fileNamePattern>${LOG_HOME}irs-functime.%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>
    </appender>
    <!--跟踪日志-->
    <appender name="DATELOG_TRACE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--<filter class="com.yixue.irsapi.filter.TraceLogFilter">-->
        <!--</filter>-->
        <encoder>
            <pattern>|irs-server |%d{yyyy-MM-dd HH:mm:ss.SSS}|%c{0} %M|%level|%m%n</pattern>
        </encoder>
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志输出位置 可相对、和绝对路径 -->
            <fileNamePattern>${LOG_HOME}irs-trace.%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>
    </appender>
    <!-- ERROR级别日志 -->
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
    <appender name="DATELOG_DEBUG"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>|irs-server |%d{yyyy-MM-dd HH:mm:ss.SSS} |%c{0}-%M|%level| %m%n</pattern>
        </encoder>
        <!-- 过滤器，只记录DEBUG级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志输出位置 可相对、和绝对路径 -->
            <fileNamePattern>${LOG_HOME}irs-debug.%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>
    </appender>

    <appender name="DATELOG_ERROR"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>|irs-server |%d{yyyy-MM-dd HH:mm:ss.SSS} |%c{0}-%M|%level| %m%n</pattern>
        </encoder>
        <!-- 过滤器，只记录ERROR级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志输出位置 可相对、和绝对路径 -->
            <fileNamePattern>${LOG_HOME}irs-error.%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>
    </appender>

    <appender name="DATELOG_INFO"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>|irs-server |%d{yyyy-MM-dd HH:mm:ss.SSS} |%c{0}-%M|%level| %m%n</pattern>
        </encoder>
        <!-- 过滤器，只记录INFO级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志输出位置 可相对、和绝对路径 -->
            <fileNamePattern>${LOG_HOME}irs-info.%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>
    </appender>


    <appender name="DATELOG_STATUS"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>|irs-server |%d{yyyy-MM-dd HH:mm:ss.SSS} |%c{0}-%M|%level| %m%n</pattern>
        </encoder>
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志输出位置 可相对、和绝对路径 -->
            <fileNamePattern>${LOG_HOME}irs-status.%d{yyyy-MM-dd}.log
            </fileNamePattern>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- 异步输出日志 -->
    <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">

        <discardingThreshold>0</discardingThreshold>

        <queueSize>512</queueSize>

        <neverBlock>true</neverBlock>
        <!--错误日志 appender 只能是一个-->
        <appender-ref ref="DATELOG_ERROR"/>
        <!--&lt;!&ndash;INFO日志 &ndash;&gt;-->
        <!--<appender-ref ref="DATELOG_INFO"/>-->
        <!--&lt;!&ndash;状态日志 &ndash;&gt;-->
        <!--<appender-ref ref="DATELOG_STATUS"/>-->
        <!--&lt;!&ndash;DEBUG日志 &ndash;&gt;-->
        <!--<appender-ref ref="DATELOG_DEBUG"/>-->
        <!--&lt;!&ndash;TRACE日志 &ndash;&gt;-->
        <!--<appender-ref ref="DATELOG_TRACE"/>-->
        <!--&lt;!&ndash;性能日志 &ndash;&gt;-->
        <!--<appender-ref ref="DATELOG_FUNCTIME"/>-->

    </appender>


    <logger name="ch.qos.logback" level="ERROR">
        <appender-ref ref="STDOUT"/>
    </logger>
    <logger name="com.alibaba.druid" level="ERROR">
        <appender-ref ref="STDOUT"/>
    </logger>
    <logger name="com.apache" level="ERROR"/>
    <logger name="org.springframework" level="ERROR">
        <appender-ref ref="STDOUT"/>
    </logger>
    <logger name="org.apache.kafka" level="ERROR">
        <appender-ref ref="STDOUT"/>
    </logger>
    <logger name="org.springframework.kafka" level="ERROR">
        <appender-ref ref="STDOUT"/>
    </logger>
    <logger name="org.apache.zookeeper" level="ERROR">
        <appender-ref ref="STDOUT"/>
    </logger>
    <logger name="com.sun.jersey" level="ERROR">
        <appender-ref ref="STDOUT"/>
    </logger>

    <!--<logger name="com.yixue.irsservice.listener" level="DEBUG">-->
    <!--<appender-ref ref="STDOUT"/>-->
    <!--</logger>-->
    <!--<logger name="com.yixue" level="info"/>-->

    <!-- 配置好前面对应的appender -->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="DATELOG_ERROR"/>
        <appender-ref ref="DATELOG_INFO"/>
        <appender-ref ref="DATELOG_STATUS"/>
        <appender-ref ref="DATELOG_DEBUG"/>
        <appender-ref ref="DATELOG_TRACE"/>
        <appender-ref ref="DATELOG_FUNCTIME"/>
    </root>

</configuration>
